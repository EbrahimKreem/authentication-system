{"version":3,"sources":["../node_modules/react-apollo-hooks/es/internal/SSRContext.js","../node_modules/react-apollo-hooks/es/queryCache.js","../node_modules/react-apollo-hooks/es/useQuery.js","Secret/queries.js","Secret/index.js"],"names":["SSRContext","Object","react","cachedQueriesByClient","WeakMap","getCachedQueriesForClient","client","queriesForClient","get","Map","set","getCacheKey","_ref","query","options","source","excluded","key","i","target","sourceKeys","keys","length","indexOf","_objectWithoutPropertiesLoose","printer","utils","_extends","assign","arguments","prototype","hasOwnProperty","call","apply","this","useQuery","_temp","_ref$ssr","ssr","_ref$skip","skip","_ref$suspend","suspend","pollInterval","_ref$notifyOnNetworkS","notifyOnNetworkStatusChange","overrideClient","context","metadata","variables","actualCachePolicy","fetchPolicy","errorPolicy","fetchResults","ApolloContext","ssrManager","ssrInUse","shouldSkip","watchQueryOptions","observableQuery","cacheKey","watchQuery","getCachedObservableQuery","_useState","responseId","setResponseId","currentResult","helpers","fetchMore","bind","refetch","startPolling","stopPolling","updateQuery","result","getCurrentResult","data","error","errors","getLastResult","undefined","loading","networkStatus","bundle_esm","graphQLErrors","partial","stale","invalidateCurrentResult","actHack","x","subscription","subscribe","invalidateCachedObservableQuery","unsubscribe","Error","ensureSupportedFetchPolicy","register","CURRENT_USER","gql","_templateObject","Secret","props","useEffect","localStorage","getItem","history","push","_useQuery","react_default","a","createElement","Loader","active","inline","size","style","marginTop","maxWidth","margin","Segment","Header","textAlign","me","name"],"mappings":"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","file":"static/js/11.aca4cf42.chunk.js","sourcesContent":["import { createContext } from 'react';\nexport function createSSRManager() {\n  var promiseSet = new Set();\n  return {\n    hasPromises: function hasPromises() {\n      return promiseSet.size > 0;\n    },\n    register: function register(promise) {\n      promiseSet.add(promise);\n    },\n    consumeAndAwaitPromises: function consumeAndAwaitPromises() {\n      var promises = Array.from(promiseSet);\n      promiseSet.clear();\n      return Promise.all(promises);\n    }\n  };\n}\nexport var SSRContext = createContext(null);","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { print } from 'graphql/language/printer';\nimport { objToKey } from './utils';\nvar cachedQueriesByClient = new WeakMap();\nexport function getCachedObservableQuery(client, options) {\n  var queriesForClient = getCachedQueriesForClient(client);\n  var cacheKey = getCacheKey(options);\n  var observableQuery = queriesForClient.get(cacheKey);\n\n  if (observableQuery == null) {\n    observableQuery = client.watchQuery(options);\n    queriesForClient.set(cacheKey, observableQuery);\n  }\n\n  return observableQuery;\n}\nexport function invalidateCachedObservableQuery(client, options) {\n  var queriesForClient = getCachedQueriesForClient(client);\n  var cacheKey = getCacheKey(options);\n  queriesForClient[\"delete\"](cacheKey);\n}\n\nfunction getCachedQueriesForClient(client) {\n  var queriesForClient = cachedQueriesByClient.get(client);\n\n  if (queriesForClient == null) {\n    queriesForClient = new Map();\n    cachedQueriesByClient.set(client, queriesForClient);\n  }\n\n  return queriesForClient;\n}\n\nfunction getCacheKey(_ref) {\n  var query = _ref.query,\n      options = _objectWithoutPropertiesLoose(_ref, [\"query\"]);\n\n  return print(query) + \"@@\" + objToKey(options);\n}","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { ApolloError } from 'apollo-client';\nimport { useContext, useEffect, useMemo, useState } from 'react';\nimport { useApolloClient } from './ApolloContext';\nimport { SSRContext } from './internal/SSRContext';\nimport actHack from './internal/actHack';\nimport { getCachedObservableQuery, invalidateCachedObservableQuery } from './queryCache';\nimport { compact, objToKey } from './utils';\nexport function useQuery(query, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr,\n      _ref$skip = _ref.skip,\n      skip = _ref$skip === void 0 ? false : _ref$skip,\n      _ref$suspend = _ref.suspend,\n      suspend = _ref$suspend === void 0 ? false : _ref$suspend,\n      pollInterval = _ref.pollInterval,\n      _ref$notifyOnNetworkS = _ref.notifyOnNetworkStatusChange,\n      notifyOnNetworkStatusChange = _ref$notifyOnNetworkS === void 0 ? false : _ref$notifyOnNetworkS,\n      overrideClient = _ref.client,\n      context = _ref.context,\n      metadata = _ref.metadata,\n      variables = _ref.variables,\n      actualCachePolicy = _ref.fetchPolicy,\n      errorPolicy = _ref.errorPolicy,\n      fetchResults = _ref.fetchResults;\n\n  var client = useApolloClient(overrideClient);\n  var ssrManager = useContext(SSRContext);\n  var ssrInUse = ssr && ssrManager; // Skips when `skip: true` or SSRContext passed but `ssr: false`\n\n  var shouldSkip = skip || ssrManager != null && !ssr;\n  var fetchPolicy = ssrInUse && ( // Taken from https://github.com/apollographql/react-apollo/blob/2d7e48b7d0c26e792e1ed26e98bb84d8fba5bb8a/src/Query.tsx#L167-L169\n  actualCachePolicy === 'network-only' || actualCachePolicy === 'cache-and-network') ? 'cache-first' : actualCachePolicy;\n  var watchQueryOptions = useMemo(function () {\n    return compact({\n      context: context,\n      errorPolicy: errorPolicy,\n      fetchPolicy: fetchPolicy,\n      fetchResults: fetchResults,\n      metadata: metadata,\n      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n      pollInterval: pollInterval,\n      query: query,\n      variables: variables\n    });\n  }, [query, pollInterval, notifyOnNetworkStatusChange, context && objToKey(context), metadata && objToKey(metadata), variables && objToKey(variables), fetchPolicy, errorPolicy, fetchResults]);\n  var observableQuery = useMemo(function () {\n    return getCachedObservableQuery(client, watchQueryOptions);\n  }, [client, watchQueryOptions]);\n\n  var _useState = useState(0),\n      responseId = _useState[0],\n      setResponseId = _useState[1];\n\n  var currentResult = useMemo(function () {\n    var helpers = {\n      fetchMore: observableQuery.fetchMore.bind(observableQuery),\n      refetch: observableQuery.refetch.bind(observableQuery),\n      startPolling: observableQuery.startPolling.bind(observableQuery),\n      stopPolling: observableQuery.stopPolling.bind(observableQuery),\n      updateQuery: observableQuery.updateQuery.bind(observableQuery)\n    };\n    var result = observableQuery.getCurrentResult(); // return the old result data when there is an error\n\n    var data = result.data;\n\n    if (result.error || result.errors) {\n      data = _extends({}, result.data, {}, (observableQuery.getLastResult() || {}).data);\n    }\n\n    if (shouldSkip) {\n      // Taken from https://github.com/apollographql/react-apollo/blob/5cb63b3625ce5e4a3d3e4ba132eaec2a38ef5d90/src/Query.tsx#L376-L381\n      return _extends({}, helpers, {\n        data: undefined,\n        error: undefined,\n        loading: false,\n        networkStatus: undefined\n      });\n    }\n\n    return _extends({}, helpers, {\n      data: data,\n      error: result.errors && result.errors.length > 0 ? new ApolloError({\n        graphQLErrors: result.errors\n      }) : result.error,\n      errors: result.errors,\n      loading: result.loading,\n      // don't try to return `networkStatus` when suspense it's used\n      // because it's unreliable in that case\n      // https://github.com/trojanowski/react-apollo-hooks/pull/68\n      networkStatus: suspend ? undefined : result.networkStatus,\n      partial: result.partial,\n      stale: result.stale\n    });\n  }, [shouldSkip, responseId, observableQuery]);\n  useEffect(function () {\n    if (shouldSkip) {\n      return;\n    }\n\n    var invalidateCurrentResult = function invalidateCurrentResult() {\n      // A hack to get rid React warnings during tests. The default\n      // implementation of `actHack` just invokes the callback immediately.\n      // In tests, it's replaced with `act` from react-testing-library.\n      // A better solution welcome.\n      actHack(function () {\n        setResponseId(function (x) {\n          return x + 1;\n        });\n      });\n    };\n\n    var subscription = observableQuery.subscribe(invalidateCurrentResult, invalidateCurrentResult);\n    invalidateCachedObservableQuery(client, watchQueryOptions);\n    return function () {\n      subscription.unsubscribe();\n    };\n  }, [shouldSkip, observableQuery]);\n  ensureSupportedFetchPolicy(suspend, fetchPolicy);\n\n  if (currentResult.partial) {\n    if (suspend) {\n      // throw a promise - use the react suspense to wait until the data is\n      // available\n      throw observableQuery.result();\n    }\n\n    if (ssrInUse) {\n      ssrManager.register(observableQuery.result());\n    }\n  }\n\n  return currentResult;\n}\n\nfunction ensureSupportedFetchPolicy(suspend, fetchPolicy) {\n  if (suspend && fetchPolicy && fetchPolicy !== 'cache-first') {\n    throw new Error(\"Fetch policy \" + fetchPolicy + \" is not supported without 'suspend: false'\");\n  }\n}","import gql from 'graphql-tag';\n\nexport const CURRENT_USER = gql`\n  {\n    me {\n      _id\n      name\n    }\n  }\n`;\n","import React, { useEffect } from 'react';\nimport { useQuery } from 'react-apollo-hooks';\nimport { Header, Segment, Loader } from 'semantic-ui-react';\n\nimport { CURRENT_USER } from './queries';\n\nconst Secret = props => {\n  useEffect(() => {\n    if (!localStorage.getItem('token')) props.history.push('/register');\n  }, []);\n\n  const { data, loading } = useQuery(CURRENT_USER);\n\n  if (loading)\n    return (\n      <Loader\n        active={loading}\n        inline=\"centered\"\n        size=\"large\"\n        style={{ marginTop: 200 }}\n      />\n    );\n  return (\n    <div>\n      <div style={{ maxWidth: 600, margin: '100px auto' }}>\n        <Segment>\n          <Header textAlign=\"center\">\n            Wellcome {data.me.name} this is your secret page :)\n          </Header>\n        </Segment>\n      </div>\n    </div>\n  );\n};\n\nexport default Secret;\n"],"sourceRoot":""}