{"version":3,"sources":["../node_modules/react-apollo-hooks/es/internal/SSRContext.js","../node_modules/react-apollo-hooks/es/utils.js","../node_modules/react-apollo-hooks/es/queryCache.js","../node_modules/react-apollo-hooks/es/useQuery.js","../node_modules/react-apollo-hooks/es/internal/actHack.js","Secret/queries.js","Secret/index.js"],"names":["SSRContext","Object","react","objToKey","obj","isPlainObject_default","sortedObj","keys","sort","reduce","result","key","JSON","stringify","cachedQueriesByClient","WeakMap","getCachedQueriesForClient","client","queriesForClient","get","Map","set","getCacheKey","_ref","query","options","source","excluded","i","target","sourceKeys","length","indexOf","_objectWithoutPropertiesLoose","printer","_extends","assign","arguments","prototype","hasOwnProperty","call","apply","this","useQuery","_temp","_ref$ssr","ssr","_ref$skip","skip","_ref$suspend","suspend","pollInterval","_ref$notifyOnNetworkS","notifyOnNetworkStatusChange","overrideClient","context","metadata","variables","actualCachePolicy","fetchPolicy","errorPolicy","fetchResults","ApolloContext","ssrManager","ssrInUse","shouldSkip","watchQueryOptions","acc","undefined","observableQuery","cacheKey","watchQuery","getCachedObservableQuery","_useState","responseId","setResponseId","currentResult","helpers","fetchMore","bind","refetch","startPolling","stopPolling","updateQuery","data","error","errors","getLastResult","loading","networkStatus","bundle_esm","graphQLErrors","partial","invalidateCurrentResult","x","callback","subscription","subscribe","delete","invalidateCachedObservableQuery","unsubscribe","Error","ensureSupportedFetchPolicy","register","CURRENT_USER","gql","_templateObject","Secret","props","useEffect","localStorage","getItem","history","push","_useQuery","react_default","a","createElement","Loader","active","inline","size","style","marginTop","maxWidth","margin","Segment","Header","textAlign","me","name"],"mappings":"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","file":"static/js/11.9e1ea46b.chunk.js","sourcesContent":["import { createContext } from 'react';\nexport function createSSRManager() {\n  var promiseSet = new Set();\n  return {\n    hasPromises: function hasPromises() {\n      return promiseSet.size > 0;\n    },\n    register: function register(promise) {\n      promiseSet.add(promise);\n    },\n    consumeAndAwaitPromises: function consumeAndAwaitPromises() {\n      var promises = Array.from(promiseSet);\n      promiseSet.clear();\n      return Promise.all(promises);\n    }\n  };\n}\nexport var SSRContext = createContext(null);","import isPlainObject from 'lodash/isPlainObject';\nexport function objToKey(obj) {\n  if (!isPlainObject(obj)) {\n    return obj;\n  }\n\n  var sortedObj = Object.keys(obj).sort().reduce(function (result, key) {\n    result[key] = objToKey(obj[key]);\n    return result;\n  }, {});\n  return JSON.stringify(sortedObj);\n}\nexport function isPromiseLike(value) {\n  return value != null && typeof value.then === 'function';\n}\nexport function compact(obj) {\n  return Object.keys(obj).reduce(function (acc, key) {\n    if (obj[key] !== undefined) {\n      acc[key] = obj[key];\n    }\n\n    return acc;\n  }, {});\n}","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { print } from 'graphql/language/printer';\nimport { objToKey } from './utils';\nvar cachedQueriesByClient = new WeakMap();\nexport function getCachedObservableQuery(client, options) {\n  var queriesForClient = getCachedQueriesForClient(client);\n  var cacheKey = getCacheKey(options);\n  var observableQuery = queriesForClient.get(cacheKey);\n\n  if (observableQuery == null) {\n    observableQuery = client.watchQuery(options);\n    queriesForClient.set(cacheKey, observableQuery);\n  }\n\n  return observableQuery;\n}\nexport function invalidateCachedObservableQuery(client, options) {\n  var queriesForClient = getCachedQueriesForClient(client);\n  var cacheKey = getCacheKey(options);\n  queriesForClient.delete(cacheKey);\n}\n\nfunction getCachedQueriesForClient(client) {\n  var queriesForClient = cachedQueriesByClient.get(client);\n\n  if (queriesForClient == null) {\n    queriesForClient = new Map();\n    cachedQueriesByClient.set(client, queriesForClient);\n  }\n\n  return queriesForClient;\n}\n\nfunction getCacheKey(_ref) {\n  var query = _ref.query,\n      options = _objectWithoutPropertiesLoose(_ref, [\"query\"]);\n\n  return print(query) + \"@@\" + objToKey(options);\n}","function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { ApolloError } from 'apollo-client';\nimport { useContext, useEffect, useMemo, useState } from 'react';\nimport { useApolloClient } from './ApolloContext';\nimport { SSRContext } from './internal/SSRContext';\nimport actHack from './internal/actHack';\nimport { getCachedObservableQuery, invalidateCachedObservableQuery } from './queryCache';\nimport { compact, objToKey } from './utils';\nexport function useQuery(query, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$ssr = _ref.ssr,\n      ssr = _ref$ssr === void 0 ? true : _ref$ssr,\n      _ref$skip = _ref.skip,\n      skip = _ref$skip === void 0 ? false : _ref$skip,\n      _ref$suspend = _ref.suspend,\n      suspend = _ref$suspend === void 0 ? false : _ref$suspend,\n      pollInterval = _ref.pollInterval,\n      _ref$notifyOnNetworkS = _ref.notifyOnNetworkStatusChange,\n      notifyOnNetworkStatusChange = _ref$notifyOnNetworkS === void 0 ? false : _ref$notifyOnNetworkS,\n      overrideClient = _ref.client,\n      context = _ref.context,\n      metadata = _ref.metadata,\n      variables = _ref.variables,\n      actualCachePolicy = _ref.fetchPolicy,\n      errorPolicy = _ref.errorPolicy,\n      fetchResults = _ref.fetchResults;\n\n  var client = useApolloClient(overrideClient);\n  var ssrManager = useContext(SSRContext);\n  var ssrInUse = ssr && ssrManager; // Skips when `skip: true` or SSRContext passed but `ssr: false`\n\n  var shouldSkip = skip || ssrManager != null && !ssr;\n  var fetchPolicy = ssrInUse && ( // Taken from https://github.com/apollographql/react-apollo/blob/2d7e48b7d0c26e792e1ed26e98bb84d8fba5bb8a/src/Query.tsx#L167-L169\n  actualCachePolicy === 'network-only' || actualCachePolicy === 'cache-and-network') ? 'cache-first' : actualCachePolicy;\n  var watchQueryOptions = useMemo(function () {\n    return compact({\n      context: context,\n      errorPolicy: errorPolicy,\n      fetchPolicy: fetchPolicy,\n      fetchResults: fetchResults,\n      metadata: metadata,\n      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n      pollInterval: pollInterval,\n      query: query,\n      variables: variables\n    });\n  }, [query, pollInterval, notifyOnNetworkStatusChange, context && objToKey(context), metadata && objToKey(metadata), variables && objToKey(variables), fetchPolicy, errorPolicy, fetchResults]);\n  var observableQuery = useMemo(function () {\n    return getCachedObservableQuery(client, watchQueryOptions);\n  }, [client, watchQueryOptions]);\n\n  var _useState = useState(0),\n      responseId = _useState[0],\n      setResponseId = _useState[1];\n\n  var currentResult = useMemo(function () {\n    var helpers = {\n      fetchMore: observableQuery.fetchMore.bind(observableQuery),\n      refetch: observableQuery.refetch.bind(observableQuery),\n      startPolling: observableQuery.startPolling.bind(observableQuery),\n      stopPolling: observableQuery.stopPolling.bind(observableQuery),\n      updateQuery: observableQuery.updateQuery.bind(observableQuery)\n    };\n    var result = observableQuery.currentResult(); // return the old result data when there is an error\n\n    var data = result.data;\n\n    if (result.error || result.errors) {\n      data = _extends({}, result.data, (observableQuery.getLastResult() || {}).data);\n    }\n\n    if (shouldSkip) {\n      // Taken from https://github.com/apollographql/react-apollo/blob/5cb63b3625ce5e4a3d3e4ba132eaec2a38ef5d90/src/Query.tsx#L376-L381\n      return _extends({}, helpers, {\n        data: undefined,\n        error: undefined,\n        loading: false,\n        networkStatus: undefined\n      });\n    }\n\n    return _extends({}, helpers, {\n      data: data,\n      error: result.errors && result.errors.length > 0 ? new ApolloError({\n        graphQLErrors: result.errors\n      }) : result.error,\n      errors: result.errors,\n      loading: result.loading,\n      // don't try to return `networkStatus` when suspense it's used\n      // because it's unreliable in that case\n      // https://github.com/trojanowski/react-apollo-hooks/pull/68\n      networkStatus: suspend ? undefined : result.networkStatus,\n      partial: result.partial\n    });\n  }, [shouldSkip, responseId, observableQuery]);\n  useEffect(function () {\n    if (shouldSkip) {\n      return;\n    }\n\n    var invalidateCurrentResult = function invalidateCurrentResult() {\n      // A hack to get rid React warnings during tests. The default\n      // implementation of `actHack` just invokes the callback immediately.\n      // In tests, it's replaced with `act` from react-testing-library.\n      // A better solution welcome.\n      actHack(function () {\n        setResponseId(function (x) {\n          return x + 1;\n        });\n      });\n    };\n\n    var subscription = observableQuery.subscribe(invalidateCurrentResult, invalidateCurrentResult);\n    invalidateCachedObservableQuery(client, watchQueryOptions);\n    return function () {\n      subscription.unsubscribe();\n    };\n  }, [shouldSkip, observableQuery]);\n  ensureSupportedFetchPolicy(suspend, fetchPolicy);\n\n  if (currentResult.partial) {\n    if (suspend) {\n      // throw a promise - use the react suspense to wait until the data is\n      // available\n      throw observableQuery.result();\n    }\n\n    if (ssrInUse) {\n      ssrManager.register(observableQuery.result());\n    }\n  }\n\n  return currentResult;\n}\n\nfunction ensureSupportedFetchPolicy(suspend, fetchPolicy) {\n  if (suspend && fetchPolicy && fetchPolicy !== 'cache-first') {\n    throw new Error(\"Fetch policy \" + fetchPolicy + \" is not supported without 'suspend: false'\");\n  }\n}","export default function actHack(callback) {\n  callback();\n}","import gql from 'graphql-tag';\n\nexport const CURRENT_USER = gql`\n  {\n    me {\n      _id\n      name\n    }\n  }\n`;\n","import React, { useEffect } from 'react';\nimport { useQuery } from 'react-apollo-hooks';\nimport { Header, Segment, Loader } from 'semantic-ui-react';\n\nimport { CURRENT_USER } from './queries';\n\nconst Secret = props => {\n  useEffect(() => {\n    if (!localStorage.getItem('token')) props.history.push('/authentication-system/register');\n  }, []);\n\n  const { data, loading } = useQuery(CURRENT_USER);\n\n  if (loading)\n    return (\n      <Loader\n        active={loading}\n        inline=\"centered\"\n        size=\"large\"\n        style={{ marginTop: 200 }}\n      />\n    );\n  return (\n    <div>\n      <div style={{ maxWidth: 600, margin: '100px auto' }}>\n        <Segment>\n          <Header textAlign=\"center\">\n            Wellcome {data.me.name} this is your secret page :)\n          </Header>\n        </Segment>\n      </div>\n    </div>\n  );\n};\n\nexport default Secret;\n"],"sourceRoot":""}