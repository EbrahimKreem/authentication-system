{"version":3,"sources":["shared/ErrorMessage.js","shared/EmailField.js","shared/Portal.js","Forgot-Password/mutations.js","Forgot-Password/index.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","formik__WEBPACK_IMPORTED_MODULE_1__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_2__","ErrorMessageHandler","_ref","field","a","createElement","name","msg","basic","color","pointing","size","semantic_ui_react__WEBPACK_IMPORTED_MODULE_1__","formik__WEBPACK_IMPORTED_MODULE_2__","_ErrorMessage__WEBPACK_IMPORTED_MODULE_3__","Email","Fragment","Field","type","placeholder","semantic_ui_react__WEBPACK_IMPORTED_MODULE_3__","PortalCMP","content","show","close","onClose","open","raised","style","left","position","top","marginRight","zIndex","circular","link","float","onClick","FORGOT_PASSWORD","gql","_templateObject","ForgotPasswordSchema","Yup","shape","email","required","ForgotPassword","props","forgotPassword","useMutation","_useState","useState","_useState2","Object","slicedToArray","showPortal","setShowPortal","onSubmit","asyncToGenerator","regenerator_default","mark","_callee","values","actions","wrap","_context","prev","next","variables","setSubmitting","t0","setFieldError","stop","_x","_x2","apply","this","arguments","react_default","formik_esm","initialValues","validationSchema","className","Portal","Segment","stacked","padding","Header","Form","handleSubmit","loading","isSubmitting","EmailField","Button"],"mappings":"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","file":"static/js/9.5d5fc800.chunk.js","sourcesContent":["import React from 'react';\nimport { ErrorMessage } from 'formik';\nimport { Label } from 'semantic-ui-react';\n\nconst ErrorMessageHandler = ({ field }) => {\n  return (\n    <ErrorMessage name={field}>\n      {msg => (\n        <Label basic color=\"red\" pointing=\"below\" size=\"small\">\n          {msg}\n        </Label>\n      )}\n    </ErrorMessage>\n  );\n};\n\nexport default ErrorMessageHandler;\n","import React from 'react';\nimport { Form } from 'semantic-ui-react';\nimport { Field } from 'formik';\nimport ErrorMessageHandler from './ErrorMessage';\n\nconst Email = () => {\n  return (\n    <>\n      <ErrorMessageHandler field=\"email\" />\n      <Form.Field>\n        <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n      </Form.Field>\n    </>\n  );\n};\n\nexport default Email;\n","import React from 'react';\nimport { Portal, Segment, Icon } from 'semantic-ui-react';\n\nconst PortalCMP = ({ content, show, close }) => {\n  return (\n    <Portal onClose={close} open={show}>\n      <Segment\n        raised\n        style={{\n          left: '80%',\n          position: 'fixed',\n          top: '10%',\n          marginRight: '20px',\n          zIndex: 1000,\n        }}\n      >\n        <Icon\n          name=\"close\"\n          circular\n          link\n          style={{ float: 'right' }}\n          onClick={close}\n        />\n        <p style={{ color: '#576366' }}>{content}</p>\n      </Segment>\n    </Portal>\n  );\n};\n\nexport default PortalCMP;\n","import gql from 'graphql-tag';\n\nexport const FORGOT_PASSWORD = gql`\n  mutation($email: String!) {\n    forgotPassword(email: $email)\n  }\n`;\n","import React, { useState } from 'react';\nimport { Form, Button, Segment, Header } from 'semantic-ui-react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useMutation } from 'react-apollo-hooks';\n\nimport { FORGOT_PASSWORD } from './mutations';\nimport Email from 'shared/EmailField';\nimport Portal from 'shared/Portal';\n\nconst ForgotPasswordSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('Invalid email')\n    .required('Required'),\n});\n\nconst ForgotPassword = props => {\n  const forgotPassword = useMutation(FORGOT_PASSWORD);\n  const [showPortal, setShowPortal] = useState(false);\n\n  const onSubmit = async (values, actions) => {\n    try {\n      await forgotPassword({\n        variables: { email: values.email },\n      });\n      actions.setSubmitting(false);\n      setShowPortal(true);\n    } catch (error) {\n      actions.setFieldError(\n        'email',\n        'No account with this email address exists'\n      );\n      actions.setSubmitting(false);\n    }\n  };\n  return (\n    <Formik\n      initialValues={{ email: '' }}\n      validationSchema={ForgotPasswordSchema}\n      onSubmit={onSubmit}\n    >\n      {props => {\n        return (\n          <div className=\"frm\">\n            {showPortal ? (\n              <Portal\n                show={showPortal}\n                close={() => setShowPortal(false)}\n                content=\"Alright! Instructions to reset your password\n               have been emailed to you. Please check your email.\"\n              />\n            ) : null}\n            <Segment stacked>\n              <div style={{ padding: '.6em' }}>\n                <Header>Reset Password</Header>\n                <p style={{ color: '#576366' }}>\n                  Enter your email address and weâ€™ll send you an email with\n                  instructions to reset your password.\n                </p>\n                <Form\n                  onSubmit={props.handleSubmit}\n                  loading={props.isSubmitting}\n                >\n                  <Email />\n                  <Button type=\"submit\" basic>\n                    Submit\n                  </Button>\n                </Form>\n              </div>\n            </Segment>\n          </div>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default ForgotPassword;\n"],"sourceRoot":""}